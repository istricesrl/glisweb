/*!

    \page deploy_phing strategie di deploy del framework tramite Phing

    Descrizione delle strategie di deploy del framework tramite Phing.

    introduzione
    ============
    Il framework supporta un sofisticato sistema di deploy automatico tramite Phing. Grazie a questo approccio, è facilissimo effettuare
    il deploy del framework da uno stage all'altro, per esempio da DEV a TEST e da TEST a STABLE. 

    strategie di deploy
    ===================

    deploy via FTP
    --------------

    deploy via scp
    --------------

    deploy via rsync locale
    -----------------------

    deploy via rsync remoto
    -----------------------

    struttura del sistema di deploy
    ===============================
    Per comprendere il funzionamento del sistema di deploy tramite Phing del framework, è necessario studiare e comprendere il file
    _usr/_deploy/_phing/_build.xml e necessariamente avere familiarità con Phing stesso (https://www.phing.info/ e specificamente
    https://www.phing.info/guide/hlhtml/). Tuttavia, è possibile limitarsi a configurare il sistema di deploy creando e modificando file
    properties in usr/deploy/phing/ senza approfondire il funzionamento del meccanismo.

    _usr/_deploy/_phing/_build.xml
    ------------------------------

    usr/deploy/phing/*.properties
    -----------------------------
    Un file properties può essere creato per ogni target di deploy, quindi è possibile supportare target di deploy multipli a partire da
    un singolo punto di partenza. Questo è particolarmente utile nei deploy a tre step (sviluppo, test e produzione) in quanto consente di
    distribuire ad ogni step le informazioni per il deploy verso lo step successivo. In generale, è buona prassi dare al file properties
    il nome dello step target quindi nel caso del deploy a tre step creeremo test.properties e stable.properties.

    Come punto di partenza, si può utilizzare l'esempio _usr/_examples/_phing/build.properties, copiandolo in usr/deploy/phing/ e rinominandolo
    opportunamente (ad esempio test.properties per il deploy su test e stable.properties per il deploy su stable); fatto questo, si può
    procedere a modificarne il contenuto seguendo le indicazioni dei commenti contenuti nel file stesso, che riassumiamo comunque nella
    seguente tabella:

    chiave          | valore                | note
    ----------------|-----------------------|---------------------------------------------------------------------
    prj.nme         |                       |
    prj.git         |                       |
    prj.key         |                       |
    src.fld         |                       |
    src.stg         |                       |
    src.url         |                       |
    dst.hst         |                       |
    dst.fld         |                       |
    dst.stg         |                       |
    dst.url         |                       |
    dst.cmd         |                       |
    ftp.usr         |                       |
    ftp.psw         |                       |
    ftp.dir         |                       |
    key.usr         |                       |
    key.prv         |                       |
    key.pub         |                       |
    slack.sa        |                       |
    slack.sb        |                       |
    slack.sc        |                       |
    eml.adr         |                       |
    eml.nme         |                       |

    Nel compilare il file properties, si tenga presente che tutti i valori non vanno messi fra virgolette, anche se contengono spazi.

    integrazione con Git
    ====================

    notifiche
    =========

    notifiche via Slack
    -------------------

    notifiche via mail
    ------------------

    come attivare il sistema di deploy tramite Phing per un progetto
    ================================================================
    Attivare il sistema di deploy tramite Phing per un progetto è semplicissimo, basta copiare il file _usr/_examples/_phing/build.properties
    in usr/deploy/phing/ rinominandolo in base al target di destinazione che si intende assegnare al file, ad esempio per il file che
    contiene le istruzioni per il deploy su stable si rinominerà il file da build.properties a stable.properties.

    Una volta creato il file, si dovranno inserire le informazioni per il deploy, tenendo conto di quanto visto sopra; fatto questo,
    il sistema di deploy sarà utilizzabile tramite il comando:

    \code{.sh}
    _src/_sh/_phing.deploy.sh [nomeDeploy]
    \endcode

    Dove il primo argomento è il nome del file properties che si desidera utilizzare.

*/
