/*!

    \page templates.athena il template standard del framework

    Guida all'utilizzo del template standard (Athena) del framework.

    il template standard (_src/_templates/_athena/)
    ===============================================
    Il template standard Athena è di gran lunga il più importante del framework in quanto è solitamente utilizzato per tutte le
    pagine del CMS. Di conseguenza è fondamentale comprenderne il funzionamento e le logiche di fondo, anche a livello di
    attribuzione dei nomi ai file, specialmente se si intende utilizzare GlisWeb per realizzare delle web application e non
    dei semplici siti web.

    Riguardo all'attribuzione dei nomi, in particolare ai nomi degli schemi e dei file delle macro, vanno precisati alcuni punti
    essenziali al fine di semplificare il ritrovamento rapido dei file su cui intervenire in caso di necessità, dato che la grande
    estensione del template può disorientare specialmente all'inizio; si tenga perciò presente che:

    - esistono alcune categorie di pagine nel template standard del framework:
      - le pagine standard
        - l'ID della pagina è solitamente descrittivo
        - il nome dello schema corrisponde all'ID della pagina
        - il nome della macro PHP corrisponde all'ID della pagina
      - le pagine view
        - l'ID termina per "view"
        - il nome dello schema termina per "view" oppure è "default.view.html"
        - il nome della macro PHP termina per "view"
          - solitamente nella macro PHP viene inclusa anche la macro "_default.view.php"
        - il nome inizia con quello dell'entità rappresentata
      - le pagine form principali
        - l'ID termina per "form"
        - il nome dello schema termina per "form"
        - il nome della macro PHP termina per "form"
          - solitamente nella macro PHP viene inclusa anche la macro "_default.form.php"
          - opzionalmente nella macro PHP può essere inclusa una macro di default per l'entità
        - il nome inizia con quello dell'entità gestita
      - le pagine form secondarie
        - si comportano come la form principale
        - aggiungono a tutti i nomi un suffisso che le identifica
      - le pagine form multilingua
        - si comportano come le altre pagine form (principali o secondarie)
        - utilizzano un ciclo nello schema HTML per mostrare i campi della lingua corrente
      - le pagine form view
        - si comportano come le altre pagine form (principali o secondarie)
        - la loro macro PHP si comporta come quella delle view, con un filtro bloccato
        - il loro schema include lo schema di default delle view
      - le pagine tools
        - l'ID termina per "tools"
        - il nome dello schema termina per "tools" oppure è "default.tools.html"
        - il nome della macro PHP termina per "tools"
        - il nome inizia con quello dell'entità gestita
    - le macro PHP di default
      - quando una macro è pensata per essere inclusa da più pagine il suo nome inizia per "default"
    - gli schemi Twig di default
      - quando uno schema è pensato per essere incluso da più pagine il suo nome inizia per "default"
    - gli schemi Twig inclusi (con il comando Twig include)
      - vanno sempre nella sottocartella inc/
      - se appartengono a uno schema preciso
        - il loro nome deve iniziare con il nome dello schema che li include
        - se contengono filtri aggiuntivi per una view, devono riportare il suffisso "filters"
        - se contengono un modal, devono riportare il suffisso "modal" più un suffisso univoco che ne identifichi il ruolo
    - i file contenenti macro Twig
      - vanno sempre nella sottocartella bin/
      - se appartengono a uno schema preciso
        - il loro nome deve iniziare con il nome dello schema che li importa
        - se contengono subform, devono riportare il suffisso "sub"

    Vediamo alcuni esempi di pagine standard:

    ID pagina          | ID parent              | schema                         | macro
    -------------------|------------------------|--------------------------------|------------------------------------------------
    browser            | NULL                   | browser.html                   | _src/_inc/_macro/_browser.php
    dashboard          | NULL                   | dashboard.html                 | _src/_inc/_macro/_dashboard.php
    delete             | NULL                   | delete.html                    | _src/_inc/_macro/_delete.php
    password.reset     | NULL                   | password.reset.html            | _src/_inc/_macro/_password.reset.php
    strumenti          | NULL                   | strumenti.html                 | _src/_inc/_macro/_strumenti.php

    Alcuni esempi di pagine view:

    ID pagina          | ID parent              | schema                         | macro
    -------------------|------------------------|--------------------------------|------------------------------------------------
    anagrafica.view    | NULL                   | default.view.html              | _src/_inc/_macro/_anagrafica.view.php che include _src/_inc/_macro/_default.view.php

    Alcuni esempi di pagine form principali:

    ID pagina          | ID parent              | schema                         | macro
    -------------------|------------------------|--------------------------------|------------------------------------------------
    anagrafica.form    | anagrafica.view        | anagrafica.form.html           | _src/_inc/_macro/_anagrafica.form.php che include _src/_inc/_macro/_anagrafica.form.default.php e _src/_inc/_macro/_default.form.php

    Alcuni esempi di pagine form secondarie:

    ID pagina                       | ID parent              | schema                                      | macro
    --------------------------------|------------------------|---------------------------------------------|------------------------------------------------
    anagrafica.form.informazioni    | anagrafica.view        | anagrafica.form.informazioni.html           | _src/_inc/_macro/_anagrafica.form.informazioni.php che include _src/_inc/_macro/_anagrafica.form.default.php e _src/_inc/_macro/_default.form.php

    Si noti che le pagine form secondarie hanno lo stesso parent della form principale.

    Alcuni esempi di pagine form multilingua:

    ID pagina            | ID parent              | schema                           | macro
    ---------------------|------------------------|----------------------------------|------------------------------------------------
    pagine.form.testo    | pagine.view            | pagine.form.testo.html           | _src/_inc/_macro/_pagine.form.testo.php che include _src/_inc/_macro/_default.form.php

    Alcuni esempi di pagine form view:

    ID pagina             | ID parent              | schema                            | macro
    ----------------------|------------------------|-----------------------------------|------------------------------------------------
    gruppi.form.membri    | gruppi.view            | gruppi.form.membri.html           | _src/_inc/_macro/_gruppi.form.membri.php che include _src/_inc/_macro/_default.form.php

    Alcuni esempi di pagine tools:

    ID pagina             | ID parent              | schema                            | macro
    ----------------------|------------------------|-----------------------------------|------------------------------------------------
    anagrafica.tools      | anagrafica.view        | default.tools.html                | _src/_inc/_macro/_anagrafica.tools.php che include _default.tools.php

    Volendo creare una nuova pagina di una data tipologia, si può anche per brevità partire dalla copia dei file di una delle pagine sopra citate ad esempio.    

    le pagine view
    --------------
    Questo tipo di pagine è pensato per rappresentare dei dati in forma tabellare, filtrabili, ordinabili e suddivisi in pagine.
    In pratica è il meccanismo più frequente con cui vengono visualizzati gli elenchi nel template Athena. Tipicamente, una
    pagina di tipo view si basa su un insieme di file così formato:

    - la macro _src/_inc/_macro/_<entità>.view.php
      - solitamente, questa poi a sua volta include la macro _src/_inc/_macro/_default.view.php
    - lo schema _src/_templates/_athena/<entità>.view.html
      - in alternativa, lo schema di default _src/_templates/_athena/default.view.html

    In via opzionale, si può avere:

    - un file di inclusione per i filtri in _src/_templates/_athena/inc/<entità>.view.filters.html

    Per capire le logiche di funzionamento delle view, è necessario studiare il codice del template di default
    _src/_templates/_athena/_default.view.html in modo da osservare come le variabili prodotte dallo user space vengono
    poi utilizzate nell'output space.

    La parte più complessa da comprendere delle pagine di tipo view è la struttura dei dati su cui lavorano; iniziamo
    a vederli nel dettaglio partendo dall'array $ct['etc']:

    chiave                                       | descrizione
    ---------------------------------------------|---------------------------------------------------------------------------------------
    etc.include.filters                          | indica allo schema _view.html di includere uno schema addizionale per i filtri
    etc.select.<e>                               | contenuto della tendina per l'entità <e>

    La creazione delle tendine va fatta di preferenza utilizzando la funzione mysqlCachedQuery() per non sovraccaricare
    il database.

    L'array $ct['view'] configura e popola la vista vera e propria, e viene dichiarato nella macro specifica di ogni pagina
    di tipo view, dopodiché viene ulteriormente elaborato nella macro di default (vedi _src/_inc/_macro/_default.view.php):

    chiave                  | descrizione
    ------------------------|---------------------------------------------------------------------------------------
    view.table              | il nome dell'entità su cui lavorare, di solito una tabella del database (ma potrebbe anche trattarsi di una view virtuale, vedi \ref database "la documentazione relativa al database" per ulteriori dettagli)
    view.cols               | un array associativo in cui le chiavi rappresentano i nomi dei campi del database mentre i valori le etichette da porre in intestazione di tabella
    view.class              | un array associativo in cui le chiavi rappresentano i nomi dei campi del database mentre i valori le classi CSS da applicare alle celle della relativa colonna
    view.onclick            | un array associativo in cui le chiavi rappresentano i nomi dei campi del database mentre i valori il codice Javascript da assegnare alla colonna
    view.open.page          | l'ID della pagina a cui portare l'utente quando fa click su una riga; il link porta con sé la query string <entità>[id]=<idEntità> (di solito una pagina di tipo form con ID form_<entità>)
    view.open.table         | il nome della tabella del database da utilizzare per aprire la riga; questo è necessario soprattutto quando la view fa riferimento a un'entità virtuale (vedi \ref database "la documentazione relativa al database")
    view.insert.page        | l'ID della pagina a cui portare l'utente quando fa clic sul + per inserire una riga, la _default.view.php gli assegna di default il valore di view.open.page se non diversamente specificato e se si hanno permessi sufficeinti;
    view.insert.path        | il percorso della pagina di inserimento calcolato in base al view.insert.page

    Si noti che l'intestazione delle colonne dichiarate in entità.view.php è molto importante in quanto lavorano sulla select che andarà a estrarre le colonne da mostrare nella view. Non è detto che le colonne dichiarate debbano essere visibili
    nella view, queste possono essere anche nascoste nel caso in cui si voglia filtrare la view senza mostrare effettivamente il campo.

    La chiave view.onclick può essere utilizzata per assegnare comportamenti arbitrari alle colonne della view, posto di bloccare la propagazione del click, ad esempio:

    \code{.php}
    // click della vista
    $ct['view']['onclick'] = array(
        'mail' => 'event.stopPropagation(); alert("esempio");'
    );
    \endcode

    Visto il ruolo fondamentale che gioca nella composizione della vista, si studi attentamente anche la struttura dell'array
    $cf['request']['__view__'] nella \ref variabili "documentazione relativa alle variabili del framework".

    La chiave view.insert.path decreta la presenza o meno del pulsante + per l'inserimento di una nuova riga a partire da una vista.
    Per far si che non sia possibile inserire un nuovo elementi nonostante si abbiano permessi sufficienti basterà inserire il seguente codice dopo aver incluso la _default.view.php
    \code{.php}
    // nascondere il button + per l'inserimento di una nuova riga
    $ct['view']['insert']['path'] = NULL;
    \endcode

    le pagine form
    --------------
    Questo tipo di pagine è pensato per gestire i dati di una tabella del database, una riga alla volta. Tipicamente, una pagina
    di tipo form si basa su un insieme di file così formato:

    - la macro _src/_inc/_macro/_<entità>.form.php
      - solitamente, questa poi a sua volta include la macro _src/_inc/_macro/_default.form.php
    - lo schema _src/_templates/_athena/<entità>.form.html
      - in alternativa, lo schema di default _src/_templates/_athena/default.form.html

    Se la pagina è figlia di un form principale (ad esempio nel caso delle tab) si mantiene la gerarchia dei nomi aggiungendo la
    specifica al nome del parent, ad esempio se la pagina form in questione è figlia di <entità>.form avremo:

    - l'ID composto da <entità>.form.<specifica>
    - il nome dello schema composto da <entità>.form.<specifica>.html
    - la macro PHP composta da <entità>.form.<specifica>.php
    - l'ID del parent che fa riferimento a <entità>.form

    L'array $ct['form'] contiene i dati di configurazione delle form (vedi anche _src/_inc/_macro/_default.form.php):

    chiave                  | descrizione
    ------------------------|---------------------------------------------------------------------------------------
    form.table              | il nome dell'entità su cui lavorare, di solito una tabella del database

    La creazione degli schemi di tipo form è una delle operazioni più delicate quando si lavora con il template standard; ci sono
    diverse cose da ricordare, ed è anche essenziale rispettare le convenzioni stilistiche e strutturali del template per
    garantire la leggibilità dello schema. La prima parte è dedicata alle operazioni preparatorie:

    \code{.html}
    {% import '_bin/_form.html' as frm %}
    {% import 'bin/default.html' as def %}
    {% import 'bin/anagrafica.form.sub.html' as sub %}

    {% extends "ext/main.html" %}

    {% block main %}

    {# DEFINIZIONI #}
    {% set table = form.table %}
    {% set ietf = localization.language.ietf %}

    {# ACCOUNT #}
    {% if session.account.id %}
        {% set account = session.account.id %}
    {% else %}
        {% set account = '__null__' %}
    {% endif %}

    {# TIPO DI METODO E ATTIVITA' SVOLTA #}
    {% if request[ table ].id %}
        {% set method = 'update' %}
        {% set activity = 'aggiornamento' %}
        {% set legend = 'aggiornato ' ~ request[ table ][ 'timestamp_aggiornamento' ]|date('Y/m/d H:i:s') %}
    {% else %}
        {% set method = 'post' %}
        {% set activity = 'inserimento' %}
        {% set legend = 'inserimento nuovo oggetto' %}
    {% endif %}
    \endcode

    Qui c'è da osservare innanzitutto l'importazione dei file di macro, lo standard _bin/_form.html soprattutto che contiene
    le macro necessarie a creare i campi del form. Il file bin/default.html contiene invece le macro di default del template,
    la più importante è quella che genera i controlli di chiusura del form (bottoni di salvataggio, cancellazione, eccetera).

    Una menzione particolare va fatta per il file bin/anagrafca.form.sub.html che contiene i subform (vedi sopra); ogni schema
    ha il suo (oppure no, se non prevede subform). Le subform sono importantissime per rendere veloce e comodo l'accesso alle
    entità collegate a quella principale, e i file che le contengono devono rispettare rigidi criteri strutturali e stilistici
    per essere leggibili e facili da manutenere (vedi sotto). Quando le entità collegate sono molte, o comunque c'è la
    possibilità di compromettere le performance del modulo principale è tuttavia preferibile utilizzare le subview (vedi sotto).

    La variabile table porta abbreviato nell'output space il valore di $ct['form']['table'] già visto in precedenza, mentre
    ietf fa lo stesso per $ct['localization']['language']['ietf'].

    La definizione delle variabili method e activity si ricollega alle colonne standard che registrano la timestamp e l'id account
    di inserimento e aggiornamento delle righe (vedi la \ref database "documentazione relativa al database" per ulteriori
    dettagli); lo schema stabilisce se si trova in uno scenario di inserimento o aggiornamento in base all'assenza o alla presenza
    di un ID di riga (se non c'è, vuol dire che si sta inserendo un nuovo oggetto).

    Una volta effettuata la preparazione dello schema è possibile iniziare a comporre l'HTML; in particolare, si rispetti
    la seguente gerarchia dei tag per assicurarsi che le macro di creazione dei campi si trovino a lavorare nel contesto corretto
    (si veda il codice dello schema _src/_templates/_athena/anagrafica.form.html per l'esempio completo):

    \code{.html}
    {# FORM DI GESTIONE #}
    <section class="row">
        <div class="col-md-12">
            <form id="form-{{ table }}" class="" action="{{ page.path[ ietf ] }}" method="post">

                {# CAMPI HIDDEN DI BASE #}
                <input type="hidden" id="id" name="{{ table }}[id]" value="{{ request[ table ].id }}">
                <input type="hidden" id="method" name="{{ table }}[__method__]" value="{{ method }}">
                <input type="hidden" id="reset" name="{{ table }}[__reset__]" value="">
                <input type="hidden" id="timestamp" name="{{ table }}[timestamp_{{ activity }}]" value="{{ 'now'|date('U') }}">
                <input type="hidden" id="account" name="{{ table }}[id_account_{{ activity }}]" value="{{ account }}">
                <input type="hidden" id="backurl" name="__backurl__" value="{{ request.__backurl__ }}">

                {# MODULO PRINCIPALE #}
                <fieldset>
                    <legend>dati generali <small>{{ legend }}</small></legend>

                    <div class="form-group form-row">
                        <div class="col-auto">
                            <span class="label-top">sigla</span>
                            {{ frm.select( table, '', '', 'id_tipologia', '', etc.select.tipologie_anagrafica, request ) }}
                        </div>
                    </div>

                    {# ... ALTRI CAMPI ... #}

                </fieldset>

                {# SUBFORM INDIRIZZI E-MAIL #}
                {{ sub.mail( table, 'mail', 'indirizzi e-mail', site, page, pages, ietf, etc, request, session ) }}

                {# ... ALTRI SUBFORM ... #}

                {# BOTTONI E COMANDI DEL MODULO #}
                <fieldset class="form-controls">
                    {{ def.controls( page, pages, ietf, session, table, request ) }}
                </fieldset>

            </form>
        </div>
    </section>

    {% endblock %}
    \endcode

    Si noti che qui viene chiuso il blocco aperto nel frammento di codice visto sopra. Sottolineiamo l'importanza di attenersi
    strettamente a questa struttura di markup per garantire la continuità grafica fra i form e il corretto funzionamento non
    solo delle macro Twig ma anche dei Javascript standard.

    Vediamo ora un esempio di subform tratto da bin/anagrafica.form.sub.html; anche in questo caso è essenziale rispettare
    rigidamente la struttura dei tag e lo stile del codice:

    \code{.html}
    {% macro mail( table, subtable, legend, site, page, pages, lang, etc, request, session ) %}
    {% import '_bin/_form.html' as frm %}
    {% set counter = 0 %}
    <fieldset id="{{ subtable }}">
        {{ frm.subformLegend( subtable, legend ) }}
        {% if request[ table ][ subtable ]|length %}
            {% set t = request[ table ][ subtable ]|length - 1 %}
        {% else %}
            {% set t = 0 %}
        {% endif %}
        {% for i in 0..t %}
        {% set r = request[ table ][ subtable ][ i ] %}
        <div id="{{ subtable }}_{{ i }}">
            {{ frm.input( table, subtable, i, 'id', '', '', request, '', 'hidden' ) }}
            {{ frm.input( table, subtable, i, 'id_anagrafica', '', '', '', '__parent_id__', 'hidden' ) }}
            <div class="form-group form-row">
                <div class="col-auto">
                    {% if i == 0 %}<span class="label-top remove-after-duplicate">notifiche</span>{% endif %}
                    {{ frm.select( table, subtable, i, 'se_notifiche', '', etc.select.se_notifiche, request ) }}
                </div>

                {# ... ALTRI CAMPI ... #}

                {% if r.id %}
                <div class="col-auto text-right remove-on-duplicate d-print-none">
                    {% if i == 0 %}<div class="label-top remove-after-duplicate">&nbsp;</div>{% endif %}
                    {{ frm.trashButton( table, subtable, page, pages, r, lang, request ) }}
                </div>
                {% endif %}
            </div>
        </div>
        {% endfor %}
    </fieldset>
    {% endmacro %}
    \endcode

    La logica dei subform è molto semplice, viene utilizzato un ciclo che riproduce una riga per ogni entità collegata,
    al minimo viene generata una riga vuota per il primo inserimento. La duplicazione delle righe è affidata alla funzione
    Javascript duplicate() alla quale si rimanda per ulteriori dettagli; qui preme evidenziare che sono sempre richiesti
    i campi nascosti per il salvataggio dell'ID e dell'ID dell'entità genitore, e che il tasto di cancellazione della riga,
    che appare solo per le entità già salvate, viene generato tramite la macro standard trashButton() per via della
    sua complessità.

    È possibile che a volte le entità correlate abbiano le colonne standard per ID account e timestamp di modifica e
    inserimento; in questo caso vanno aggiunte le logiche e i campi hidden necessari:

    \code{.html}
    \endcode

    Ricapitolando, per creare una pagina di tipo form occorre:

    - dichiarare l'array di definizione della pagina
    - creare se necessario la macro PHP
    - creare lo schema Twig
    - creare se necessario il file Twig per le subform

    le pagine tools
    ---------------
    Le pagine tools fanno solitamente largo uso della macro Twig _src/_templates/_athena/inc/metro.html per rappresentare
    all'utente elementi interattivi e dati. Esaminando il codice della macro si noterà che, per quanto riguarda i primi, ci
    sono diverse strategie che possono essere adottate sia relativamente all'esperienza utente sia relativamente all'azione
    da scatenare in risposta all'interazione dell'utente. Riassumendo, al click su un bottone metro è possibile avere:

    - l'apertura diretta di un URL (link HTML) nel caso la configurazione del bottone contenga il parametro 'url'
    - l'apertura di un modal, nel caso la configurazione del bottone contenga il parametro 'modal' con le relative sottochiavi 'id' e 'include'
    - la chiamata asincrona di un URL, nel caso la configurazione del bottone contenga il parametro 'ws' con le relative sotto chiavi
    - codice arbitrario nel caso sia specificato il parametro 'include' che indica il percorso del file Twig da includere

    Si noti che l'inclusione del codice dei modal avviene in _src/_html/_inc/_page.close.html per l'array principale $ct['page']['contents']['modals']
    e che i modal dichiarati dai bottoni metro vengono fatti confluire in questo array in _src/_inc/_macro/_default.tools.php. Convenzionalmente,
    la nomenclatura dei file Twig che contengono il codice dei modal è <pagina>.modal.<ruolo>.html ed essi vengono collocati nella sotto cartella
    inc/ del template.

    meccaniche del template
    =======================

    il meccanismo di cancellazione
    ------------------------------

    il meccanismo del backurl
    -------------------------

*/
