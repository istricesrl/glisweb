/*!

    \page caching strategie di caching del framework

    Descrizione delle strategie di caching del framework.

    introduzione
    ============
    Glisweb utilizza estensivamente diversi meccanismi di caching per garantire velocità elevate nella navigazione a un costo ragionevole in termini di risorse.
    Comprendere come questi sistemi funzionano e interagiscono fra loro è fondamentale per ottenere il massimo da essi e per gestire correttamente eventuali problemi
    o anomalie. Iniziamo con una carrellata dei sistemi di caching utilizzati dal framework introducendo sinteticamente il loro utilizzo.

    Per riassumere, si può dire che il framework tenda in maniera conservativa ad utilizzare i dati in cache finché non interviene un fattore che lo obbliga a fare altrimenti;
    si prenda ad esempio il caso classico in cui una pagina viene modificata tramite CMS. Questo comporta (a runlevel 310) che venga invalidato l'albero delle pagine tramite
    il salvataggio in $cf['contents']['updated'] della timestamp di modifica aggiornata che verrà poi alla successiva apertura di pagina confrontata con $cf['contents']['cached']
    a livello 300; si tenga presente che $cf['contents']['updated'] viene salvato in Memcache con la chiave CONTENTS_PAGES_UPDATED a livello 330.

    Sarebbe inefficiente tuttavia ricaricare anche i contenuti delle pagine che non sono state modificate; è per questo che, con granularità maggiore, opera il meccanismo di
    controllo dell'età della chiave in _mod/_3000.contenuti/_src/_config/_310.pages.php, per cui vengono recuperati dal database solo i dati relativi alle pagine effettivamente
    aggiornate anche in caso di rielaborazione dell'albero dei contenuti.

    Si noti che può essere necessario ricaricare la pagina due volte, oppure fare un aggiornamento forzato (CTRL+F5) prima che le modifiche siano visibili.

    cache su disco
    --------------
    La cache su disco viene utilizzata principalmente per le pagine HTML, che vengono salvate in formato testo e riproposte all'utente saltando l'esecuzione del framework qualora
    siano ancora valide; questo meccanismo consente risparmi importanti di risorse senza penalizzare l'aggiornamento dei contenuti.

    La cache statica delle pagine è gestita in _src/_api/_pages.php e i file di testo vengono salvati in DIR_VAR_CACHE_PAGES. Il salvataggio e l'utilizzo di questa cache è automatico
    posto che sia stata attivata tramite la valorizzazione della chiave $ct['page']['cacheable']; il caching statico è quindi una prerogativa delle singole pagine e non dell'intero
    sito.

    Memcache
    --------
    Glisweb fa largo uso di Memcache per stoccare informazioni relative ai contenuti che sarebbe inutile recuperare dal database e rielaborare ad ogni apertura di pagina.
    Per comprendere appieno come il framework utilizza memcache bisogna prima di tutto mettere a fuoco due concetti, la gestione dell'età delle chiavi e l'invalidazione selettiva
    delle cache da parte della controller.

    Come si può rilevare esaminando il codice della libreria _src/_lib/_memcache.tools.php e soprattutto della funzione memcacheWrite(), il framework crea per ogni chiave stoccata
    una seconda chiave con il suffisso _AGE che contiene la timestamp di stoccaggio della chiave principale. Questo consente alla funzione memcacheGetKeyAge() di restituire la
    timestamp di stoccaggio di ogni chiave presente in Memcache, il che torna particolarmente utile quando si debba determinare se il dato cui punta quella chiave è ancora aggiornato
    o meno (si veda ad esempio _mod/_3000.contenuti/_src/_config/_310.pages.php).

    Nella libreria _src/_lib/_memcache.utils.php invece è possibile esaminare la funzione memcacheCleanFromIndex() che si occupa di eliminare da Memcache le chiavi relative a una data
    entità; questo risulta particolarmente utile alla controller, e in particolare nel file _src/_inc/_controllers/_default.finally.php essa viene utilizzata per eliminare le chiavi
    relative all'entità correntemente modificata. Questo fa sì che in Memcache non siano mai presenti chiavi relative a dati che sono stati aggiornati nel database successivamente al
    loro stoccaggio in cache.

    La connessione a Memcache viene stabilita in _src/_config/_045.cache.php.

    Redis
    -----
    Redis viene utilizzato principalmente per il salvataggio delle sessioni; questo è molto importante specialmente in scenari orchestrati, e il supporto per le sessioni su cache Redis
    fa parte del più generale supporto del framework per Kubernetes.

    Il salvataggio delle sessioni in Redis avviene in _src/_config/_050.redis.php se la connessione a Redis è presente; questa viene stabilita poco prima in _src/_config/_045.cache.php.

    viste statiche sul database
    ---------------------------
    La necessità di ridurre l'impatto dell'esecuzione del framework sul database ha richiesto la creazione di un meccanismo di materializzazione delle viste tramite trigger; queste viste
    prendono il nome di viste statiche e il loro processo di aggiornamento viene chiamato staticizzazione. Tutte le principali entità del framework dispongono di una vista statica in
    aggiunta alla normale vista dinamica.

    logiche di caching dei contenuti
    ================================
    Una delle operazioni più onerose che il framework svolge ad ogni apertura di pagina è l'elaborazione dell'albero dei contenuti. Per evitare di doverlo fare ogni volta,
    tutti i dati relativi all'albero vengono stoccati in Memcache; i file di configurazione coinvolti in questa operazione sono:

    - _src/_config/_300.pages.php dove viene verificato se i dati sono presenti in cache
    - _src/_config/_330.pages.php dove vengono eventualmente scritti in cache i dati elaborati ai livelli 310 e 320

    Ci sono numerose costanti in gioco nel processo di valutazione della consistenza della cache; ognuna di esse rappresenta un tassello fondamentale per il funzionamento del
    sito e quindi l'elaborazione generale viene innescata in mancanza di anche solo una di esse. Le costanti relative al caching dei contenuti sono:

    costante                           | significato
    -----------------------------------|----------------------------------------------------------------------------------------------------
    CONTENTS_PAGES_CACHED              |
	CONTENTS_PAGES_UPDATED             |
	CONTENTS_PAGES_KEY                 |
	CONTENTS_TREE_KEY                  |
	CONTENTS_INDEX_KEY                 |
	CONTENTS_SHORTCUTS_KEY             |

    Se anche solo una di esse è vuota, oppure se CONTENTS_PAGES_CACHED è minore di CONTENTS_PAGES_UPDATED, viene valorizzata a false la chiave $cf['contents']['cached'] nel
    file _src/_config/_300.pages.php, il che innesca l'elaborazione completa (con alcune eccezioni come vedremo) dell'albero dei contenuti nei successivi file _src/_config/_310.pages.php
    e _src/_config/_320.pages.php (e le relative controparti nei moduli).

    Se $cf['contents']['cached'] è valorizzato a false nel file _src/_config/_330.pages.php, il risultato dell'elaborazione viene scritto su Memcache e le relative chiavi vengono
    valorizzate di conseguenza.

*/
