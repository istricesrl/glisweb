## INTRODUZIONE
#
# per configurare il deploy tramite Phing, questo file va copiato in usr/deploy/phing e compilato in base
# al tipo di deploy che si vuole realizzare; il file va rinominato sostituendo "build" con l'indicazione
# dello stage di destinazione (ad es. stable.properties per il deploy in produzione)
#
# per effettuare materialmente il deploy si utilizza lo script _src/_sh/_phing.deploy.sh indicando come
# argomento il nome dello stage di cui si vuole fare il deploy (ad es. stable)
#

## PROGETTO
#
# NOTA i valori vanno indicati dopo l'uguale senza utilizzare le virgolette; se un valore
# non dev'essere settato, non lasciarlo vuoto ma commentare o eliminare la riga a meno che non
# sia diversamente speficicato nei commenti ai vari campi
#

# nome del progetto
prj.nme=

## GIT

# branch di cui fare il deploy (specificare solo nel caso in cui il progetto abbia un suo repository)
# prj.git=

## LICENZA
#
# NOTA il codice di licenza fa riferimento al servizio di assistenza e manutenzione a pagamento, in quanto
# l'uso del framework in sé è gratuito; nel caso si disponga di un codice di licenza valido, aggiungere
# il parametro prj.key e valorizzarlo con il codice di licenza che si desidera utilizzare
#

# codice di licenza
# prj.key=

## SORGENTE
#
# NOTE il percorso della sorgente è dato da src.fld + / + src.stg (fare attenzione con gli slash!)
#

# cartella sorgente (ad es. /var/www/www.sito.tld, senza slash finale)
src.fld=

# stage sorgente (ad es. dev senza slash finale)
src.stg=

# URL del progetto sorgente compreso il protocollo
src.url=

## DESTINAZIONE
#
# NOTE indicare dst.hst per deploy remoto, in caso dst.hst sia vuoto il
# deployer intende un deploy locale (via rsync)
#
# IN CASO DI dst.hst SETTATO il deploy procede con FTP se è impostato ftp.usr
# oppure con scp se dst.cmd è impostato a scp, infine con rsync di default
#
# NOTA utilizzare l'indirizzo IP per la chiave dst.hst consente di evitare
# eventuali problemi legati alla risoluzione del nome host
#
# NOTA in caso di distribuzione tramite gcloud scp indicare come dst.hst
# il nome dell'istanza destinazione e aggiungere i seguenti parametri:
# dst.gpj --> il nome del progetto GCloud di destinazione
# dst.gzn --> il nome della zona GCloud di destinazione
#

# IP o nome dell'host di destinazione (commentare per distribuzione locale)
dst.hst=

# cartella di destinazione (senza slash finale)
dst.fld=

# stage destinazione (senza slash finale)
dst.stg=

# URL del progetto di destinazione
dst.url=

# tipo di copia remota (rsync per localo o remoto, scp per remoto, gcscp per gcloud scp)
dst.cmd=

## FTP
#
# NOTA se ftp.hst e dst.hst coincidono si può utilizzare
# un richiamo con ftp.hst=${dst.hst}
#
# NOTE eliminare questa sezione se non si effettua il deploy via FTP
#

# nome utente FTP
# ftp.usr=

# password FTP
# ftp.psw=

# sotto directory FTP
# ftp.dir=

# SSH
#
# NOTE eliminare questa sezione se non si effettua il deploy remoto via rsync/scp
#
# NOTE solitamente le chiavi SSH di root sono in /root/.ssh/id_rsa e /root/.ssh/id_rsa.pub
#
# NOTE le coppie di chiavi in formato OPENSSH possono dare problemi a ssh2_auth_pubkey_file() in questo caso generare
# una coppia di chiavi RSA con il comando:
#
# ssh-keygen -m pem -f ~/.ssh/id_rsa_pem
#
# e usare di conesguenza /root/.ssh/id_rsa_pem e /root/.ssh/id_rsa_pem.pub per valorizzare key.prv e key.pub
#

# nome utente SSH
# key.usr=

# percorso chiave privata SSH
# key.prv=

# percorso chiave pubblica SSH
# key.pub=

## Slack
#
# NOTE i valori di comunicazione con Slack si estraggono dalla gestione app
# all'indirizzo https://api.slack.com/apps e dipendono dall'app usata per comunicare
# e dal canale su cui si intende inviare il messaggio
#
# NOTE eliminare questa sezione se non si desidera la notifica via Slack
#

# chiavi di Slack A, B e C
# slack.sa=
# slack.sb=
# slack.sc=

## e-mail
#
# NOTE eliminare questa sezione se non si desidera la notifica via mail
#

# indirizzo mail per le notifiche
# eml.adr=

# nome del destinatario per le notifiche
# eml.nme=
